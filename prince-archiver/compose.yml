---

x-postgres-env-variable: &postgres-env-variable
  POSTGRES_DSN: ${POSTGRES_DSN:-postgresql+asyncpg://postgres:postgres@db:5432/postgres}


x-redis-env-variable: &redis-env-variable
  REDIS_DSN: ${REDIS_DSN:-redis://redis:6379}


services:
  state-manager:
    image: mycostreams/prince-archiver:${TAG:-latest}
    build:
      context: .
    command: [
      "uvicorn",
      "--factory",
      "--host=0.0.0.0",
      "--log-config=/app/prince_archiver/logging.yml",
      "prince_archiver.entrypoints.state_manager.app:create_app"
    ]
    ports:
      - 127.0.0.1:8000:8000
    environment:
      <<: [*postgres-env-variable, *redis-env-variable]
    depends_on:
      prestart:
        condition: service_completed_successfully
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.localhost`)"
    networks:
      - default
      - traefik-public

  exporter:
    image: mycostreams/prince-archiver:${TAG:-latest}
    command: ["arq", "prince_archiver.entrypoints.exporter.WorkerSettings"]
    environment: 
      <<: *redis-env-variable
      SRC_DIR: /data
    depends_on:
      prestart:
        condition: service_completed_successfully
    networks:
      - default

  purger:
    image: mycostreams/prince-archiver:${TAG:-latest}
    command: ["arq", "prince_archiver.entrypoints.purger.WorkerSettings"]
    environment: 
      <<: *redis-env-variable
      SRC_DIR: /data
    depends_on:
      prestart:
        condition: service_completed_successfully
    networks:
      - default

  prestart:
    image: mycostreams/prince-archiver:${TAG:-latest}
    command: ["./prestart.sh"]
    environment:
      <<: [*postgres-env-variable, *redis-env-variable]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - default
    volumes:
      - "./scripts/prestart.sh:/app/prestart.sh"

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - 127.0.0.1:5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default

networks:
  default:

volumes:
  postgres_data:
